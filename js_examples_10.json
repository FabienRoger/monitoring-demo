[
  "function(query, option) {\n  var result = new RegExp(query, \"i\").exec(option.textContent);\n  if (result) {\n    return option.textContent.replace(result[0], \"<span class='selectr-match'>\" + result[0] + \"</span>\");\n  }\n  return false;\n}",
  "function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\t// modifying attribute\n\t\t\t\tvar ix = _.indexOf(_.pluck(this._attributes, 'name'), name.toLowerCase());\n\t\t\t\tif (~ix) {\n\t\t\t\t\tthis._attributes[ix].value = value;\n\t\t\t\t} else {\n\t\t\t\t\tthis._attributes.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn (_.find(this.attributeList(), function(attr) {\n\t\t\t\treturn attr.name == name;\n\t\t\t}) || {}).value;\n\t\t}",
  "function constructCredentials(password, question, answer) {\n    var credentials = {};\n    if(password) credentials.password = constructPassword(password);\n    if(question && answer) credentials.recovery_question = constructRecoveryQuestion(question, answer);\n    return credentials;\n}",
  "function parseDb(data, cb) {\n              if (data && data.trim().length) {\n                log.debug(\"Parsing database\");\n                t.__db = jsonlint.parse(data);\n              } else {\n                log.debug(\"No database to parse\");\n                t.__db = {};\n              }\n              cb(null, t.__db);\n            }",
  "function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }",
  "function emit(instance, name) {\n        var args = [].slice.call(arguments, 2);\n        if (events.indexOf(name) > -1) {\n          if (instance.handlers[name] && instance.handlers[name] instanceof Array) {\n            forEach(instance.handlers[name], function (handle) {\n              window.setTimeout(function () {\n                handle.callback.apply(handle.context, args);\n              }, 0);\n            });\n          }\n        } else {\n          throw new Error(name + ' event cannot be found on TreeView.');\n        }\n      }",
  "function ScrollAction(opt_callback, opt_distance_func) {\n    var self = this;\n\n    this.beginMeasuringHook = function() {}\n    this.endMeasuringHook = function() {}\n\n    this.callback_ = opt_callback;\n    this.distance_func_ = opt_distance_func;\n  }",
  "function makeHooksSafe(routes, store) {\n  if (Array.isArray(routes)) {\n    return routes.map(route => makeHooksSafe(route, store));\n  }\n\n  const onEnter = routes.onEnter;\n\n  if (onEnter) {\n    routes.onEnter = function safeOnEnter(...args) {\n      try {\n        store.getState();\n      } catch (err) {\n        if (onEnter.length === 3) {\n          args[2]();\n        }\n\n        // There's no store yet so ignore the hook\n        return;\n      }\n\n      onEnter.apply(null, args);\n    };\n  }\n\n  if (routes.childRoutes) {\n    makeHooksSafe(routes.childRoutes, store);\n  }\n\n  if (routes.indexRoute) {\n    makeHooksSafe(routes.indexRoute, store);\n  }\n\n  return routes;\n}",
  "function(id) {\n            var existing = doc.getElementById(id);\n            if (existing) {\n                existing.parentNode.removeChild(existing);\n            }\n        }",
  "function(target, dd, e, dragData) {\n        delete this.dropOK;\n        if (!target) {\n            return;\n        }\n\n//      Check that a field is being dragged.\n        var f = dragData.field;\n        if (!f) {\n            return;\n        }\n\n//      Check whether the data type of the column being dropped on accepts the\n//      dragged field type. If so, set dropOK flag, and highlight the target node.\n        var type = target.record.fields.get(target.fieldName).type,\n            types = Ext.data.Types;\n        switch(type){\n            case types.FLOAT:\n            case types.INT:\n                if (!f.isXType('numberfield')) {\n                    return;\n                }\n                break;\n            case types.DATE:\n                if (!f.isXType('datefield')) {\n                    return;\n                }\n                break;\n            case types.BOOL:\n                if (!f.isXType('checkbox')) {\n                    return;\n                }\n        }\n        this.dropOK = true;\n        Ext.fly(target.node).addCls('x-drop-target-active');\n    }"
]